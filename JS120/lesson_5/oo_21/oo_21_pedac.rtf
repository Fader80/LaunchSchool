{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang2057\deflangfe2057{\fonttbl{\f0\fswiss\fprq2\fcharset0 Calibri;}}
{\colortbl ;\red0\green255\blue255;}
{\*\generator Riched20 10.0.19041}{\*\mmathPr\mnaryLim0\mdispDef1\mwrapIndent1440 }\viewkind4\uc1 
\pard\nowidctlpar\sa200\sl276\slmult1\f0\fs22\lang9 First thing - what is the data structure of the deck? \line deck: consists of 52 cards. \line The cards have 4 suits - heart, diamond, club, spade\line and each suit has 13 cards - 2-10, plus king, queen, jack and ace \line\line - because the suits and certain values have labels, it should be an object?\line  - should the deck itself be an array or an object? - I think an object of arrays\line\line  - actually, we need the data structure of a card first // refer to codepen file\line\line  - for the deck, have it as an object with the suits as properties, and an array of cards as the values? \line\line  - do we iterate through the ranks and the suits to generate a deck?  - try this for now \line\line  - couple of options for the cards in the deck - we can have the suit as a property of the card (along with rank and points) - or we can leave that out and have the suit only as a property of the `deck` object. For now, include the suit as a property of a card in case we need it. We can always remove it later if it's redundant. \par
\par
deck: \line  - to an extent for now copy the generation mechanism from the oo ttt game //\par
\line you need to flesh out the participant state //\par
which to tackle first? hit or deal?  - let's go with deal:\line\line deal method: \line\line - you need to select a card at random from the deck\line       - in this case, better to have deck as an array //\line  - then add it to the respective participant's hand - actually the `deal` function should be I think for the initial deal to both player's hand? In which case should it also accept both of their hands as arguments? //\line\line  - also, do we need a random index generator method as we might need to call it multiple times, for example for `hit` etc//\line\line  - then remove that card from the deck //\line\highlight1 **bear in mind** \highlight0 - we now have 'random index generator' and 'remove card from deck' functions in the `Participant` class \par
\par

\pard\widctlpar\sa160\sl252\slmult1 next thing: we need to calculate the value of a hand.\line  - winning is determind by `player` losing 5 dollars or gaining 10 dollars. - So I think we can use the score as the total of the hand?  -// done, property called `handPoints`\line\line Where do we calculate the hand? I think on the `Participant` class? - go with this//\line\line basic hand points functionality done. next - we need to account for aces - also seems to be working //\line\line need to do player turn\line\kerning2\lang2057 Each time the player has an opportunity to hit or stay (i.e. play):\par
Display the computer's hand; one card should remain hidden.\par

\pard\nowidctlpar\sa200\sl276\slmult1 Display the player's hand and her point total.\line\line  - so we need to have a `displayHand` method for the computer\line  - we also need a `displayHand` method for the `player` - and these are both slightly different\line  - actually, we need a separate `initialDealerHandDisplay` method for the dealer, and subsequently use the common one?  - go with this for now//\line\line  - \highlight1 do you need to\highlight0  incorporate some of the initial dealer hand display and player hand and total display into the player turn functionality? \line\line Player turn:\line  - some of the functionality eg `hit` and  `isBusted` is already on the `Participant` class, so need to think about possibly incorporating them into a `playerTurn` type functionality - yes, the method is already a stub on the `TwentyOneGame` class so go with that \line `hit` method seems to be working//\line Now need to implement `stay` method - what does this do? for now, just a console log message//\line  - rewrite the `stay` method on `Participant` only and use the custom naming convention from `displayHand` etc//\line now need to implement `isBusted` - done \endash  now need to invoke it  - actually I think you need a larger `while` loop in the `playerTurn` which you break out of if you stay or bust //\line issue now that `isBusted` isn\rquote t working because `updateHandTotal` isn\rquote t being executed//\kerning0\lang9\par
\line some of the method calls on lines 233 \endash  238 needs to be incorporated into the proper game methods in the `start` method \endash  done so far for `dealCards` \line  - bring the hand display functionality, currently on `Dealer` and `Player`, to the `twentyOneGame` object in the \lquote showCards` method \endash  actually, the method calls I think should still be on those two classes, because they relate to the data on the instances (i.e. the `hand` arrays). Instead, refactor so that there\rquote s an additional \lquote showInitalCards` method (now done) and a `showCards` method (needs to be fleshed out \endash  currently a stub)//\line\line Then work on dealer\rquote s turn  - seems to be done - need to test//\line\line for the busted function calls, think of a mechanism to declare and have the other player win - like a `currentPlayer` function// - actually this was a bit extraneous\line\line if the player busts, dealer doesn't play at all - how to implement this?  - make a `playOneRound` method - this is coded, need to test it \line\line flesh out the `calcRoundOutcome` method (currently stub). We're comparing the value of the hands of `Player` and `Dealer`//\par
Most of the implementation steps from the original 21 guidelines have been done now//\par
in `playOneRound`,  - you need to call `processRoundMoney`  - again, as an argument, I think it needs to use `calcRoundOutcome`// \line  - actually, this functionality should also be extracted from the `dealerTurn` and `playerTurn` I think//\line  - yes, currently the `playerTurn` and `dealerTurn`  are doing too much (also code duplication), need to extract some of that to a `bustedMessage` function  //\line - also need to output a message after the second `if` clause  to say who won or lost the round  or if it was a draw  - separate function? I think it should also use `calcRoundOutcome`//\par
\line There are a few things that can happen in a round: \line\b someone busts:\b0\line player busts\line dealer busts\line\b nobody busts:\b0\line player wins\line dealer wins\line draw\line  - you need to sort the player's money situation out for these outcomes (apart from draw where nothing happens) - this is now done for when nobody busts , but need to implement it in bust scenarios//\par
\par
get rid of magic numbers in `processRoundMoney` and replace with constants//\par
\par
the display features as specified in the js120 instructions need to be implemented. \line  - seems to be working now for `playerTurn`//\line -seems to be also working for `dealerTurn`//\par
\par
Need to make a match loop \line  - There are a couple of exit mechanisms during the match - either the player chooses to exit after a round, or they reach 10 / 0 dollars and win / lose a match\line   - maybe some of the display functions will need to be moved into the match loop? \endash  no, I think they should stay in the participant turn functions//\line  - match loop function basic functionality seems to be working (need to playtest a bit more at home with node). \endash  actually, need to test when ask to play another round, if giving a bum input, doesn\rquote t seem to catch it and just exits the program?// \line\line  - participant\rquote s hand totals (and the actual hand itself) aren\rquote t resetting between rounds, but the dealer\rquote s seem to be\line  - `displayDealerRoundHand` (which contains a `displayHandTotal`) method is being invoked during `dealerTurn` but I think it\rquote s updating too fast so not displaying dealer\rquote s total? But I think I got rid of all the `console.clear`? \endash  so why can\rquote t you see a rolling total as the game goes on? \endash  it\rquote s because you were busting, and if you bust the dealer doesn\rquote t take a turn//\line - have commented out 4x `console.clear` for debugging the above \endash  reinstate them when done\line  - some observations: once a hand is dealt at the beginning of the game, I think the `dealerTurn` function is using the same hand for the dealer? And I think maybe the player hand is processed dynamically hence it\rquote s updating? \endash  need to investigate further. Seems that the `dealCards` method is being executed at the beginning of the `start` method, and the decks aren\rquote t being updated after. Part of `dealerTurn` is to only hit if the total of the hand is below 17, and once the dealer goes once and doesn\rquote t bust, or is already above 17, then the `dealerTurn` method doesn\rquote t alter the cards.\line  - so basically, you need to think about dealing the cards again after a round, I think that\rquote s where the issue is. But I don't understand why the dealer's cards 'reset' between rounds, but the player's cards don't?  - it\rquote s because at the beginning of the round only the placeholder function that statically displays only the first card + placeholder is used, and after the total reaches 17 the dealer will no longer continue to hit, giving the sense that it\rquote s static. \line\line\par
I think the `dealCards` method needs to be moved within the `playOneRound` method//\line  - the respective hands of the participants need to be reset after each round \endash  make a method for this? - yes, in the `Participant` class//\line\line  - bug where even if a hand does not go over 21, it's still saying the player  / dealer? busted\line  - sometimes this happens to `player` when he stays, or sometimes this happens to `dealer` after his turn, even when the points don't go over 21\line  - try and log hand totals as well right at the end of `playOneRound` when you log the hands//\line  - the first few rounds seem to go fine I think, but after that the errors start to show? - this theory needs to be tested a bit more \line  - could the answer be that `updateHandTotal` isn't being called at some point when it should be? - no I think it's because at the end of the round, `this.bustedPlayer` isn't being reset //\line  - need to ensure the deck doesn\rquote t run out of cards \endash  does the deck need to be reset after each round? I think so \endash  otherwise there\rquote ll be a smaller and smaller deck to use after each round//\line  - reinstate 4x `console.clear` calls that were commented out due to debugging//\par
\line  - instructions don't explicitly mention that we should show player's money between rounds, but lsbot suggested it would be a good idea to implement that. //\par
The `hit` function needs to be changed to generate a random card - this simulates the deck being shuffled. Right now, because you're hitting from the top of the deck, it's selecting the same card every time i.e. the jack of spades. //\line\line  - see if you can extract some of the repeated code from above into a method//\line\par
\line  - should we have separate `detetctMatchWon` and `detectMatchLost` functions, or a combined one called `detectMatchEnd`? - I think `detectMatchEnd` - this has been changed to `setMatchOutcome`//\par
\par
 - can you move some of the code at the end of `playOneRound` to the `playMatch` method (just after the `playOneRound` method call), so that `playOneRound` doesn\rquote t go over length?//\par
\par
Need to test that the `matchOutcome` functionality, along with the associated `displayResult` is working //\line\line\endash  need to set a constants for the winning  and losing match amounts in `setMatchOutcome` to get rid of magic numbers //\line\line\line\line\par
\par
\par
\par
//remember, when you copy the remote version over to vscode to replace the `prompt` method called with `rlsync.question`\par
\par
\line\par
\par
\line\line\par
\par
\par
}
 